@namespace SGE.UI.Components
@using SGE.UI.Entidades
@using SGE.Aplicacion.Entidades
@using SGE.Aplicacion.CasosDeUso.Tramite
@inject NavigationManager Navigation
@inject EstadoDeUsuario EstadoDeUsuario
@inject CasoDeUsoListarTramites listarTramites
@page "/tramite/{id:int}"

@if (!EstadoDeUsuario.IsLoggedIn)
{
    Navigation.NavigateTo("/login");
}
else if (tramites == null||tramites.Count() == 0)
{
	<p>no hay tramites cargados</p>
}
else
{
	if (puedeVer)
	{
		<input @bind="idTramite" placeholder="buscar por id" />
		<button @onclick="BuscarPorId">Buscar</button>
		<PopUpBuscar @ref="popUpBuscar" id="@idTramite" esExpediente="false" />
		<PagListaTramites tramites="@tramites" />
	}
}

@code {
	[Parameter]
	public int id { get; set; }
	private bool puedeVer = false;
	private List<Tramite>? tramites;
	private int idTramite;
	PopUpBuscar? popUpBuscar;
	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(500);
		puedeVer = EstadoDeUsuario.usuario!.Permisos.Any(p => p.Nombre!.Equals("TRAMITE_LECTURA"));
		if (id == -1)
		{
			tramites = listarTramites.Ejecutar();
		}
		else
		{
			tramites = listarTramites.Ejecutar().Where(t => t.ExpedienteId==id).ToList();
		}
		popUpBuscar = new PopUpBuscar();
	}
	private void BuscarPorId()
	{
		popUpBuscar?.Mostrar();
	}
}