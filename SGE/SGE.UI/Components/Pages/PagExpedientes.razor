@namespace SGE.UI.Components
@using SGE.Aplicacion.CasosDeUso.Expediente
@using SGE.Aplicacion.Entidades
@using SGE.UI
@using SGE.UI.Entidades
@inject NavigationManager Navigation
@inject EstadoDeUsuario EstadoDeUsuario
@inject CasoDeUsoExpedienteConsultaTodos expConsultaTodos
@rendermode InteractiveServer
@page "/expedientes"

<h3>expedientes</h3>
<PopUpCrear AltaExpediente=true />
@if (!hayExpedientes)
{
    if (puedeVer)
    {
        <button @onclick="Crear">crear Expediente</button>
    }
    else
    {
        <p>No tienes permiso para ver expedientes.</p>
    }
}
else
{   
@if (puedeVer)
    {
        <input @bind=@idExpediente placeholder="buscar por id" />
        <button @onclick="BuscarPorId"/>
        <button @onclick="Crear">crear Expediente</button>
        <PopUpBuscar id=@idExpediente esExpediente=true />
        <PagListaExpediente Expe=@expedientes/>
    }
    else
    {
        <p>No tienes permiso para ver expedientes.</p>
    }
}

@code {
    private bool hayExpedientes;
    private bool puedeVer = false;
    private int idExpediente;
    private List<Expediente>? expedientes { get; set; }
    PopUpEditar popUpEditar = null!;
    PopUpBuscar popUpBuscar = null!;
    PopUpCrear popUpCrear = null!;


    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        puedeVer= EstadoDeUsuario.usuario.Permisos.Any(p => p.Nombre.Equals("EXPEDIENTE_LECTURA"));
        if (puedeVer)
        {
            expedientes = expConsultaTodos.Ejecutar();
            hayExpedientes = expedientes != null && expedientes.Count > 0;
        }

    }
    private void Crear()
    {
        popUpCrear.Mostrar();
    }
    private void EditarOk()
    {
        popUpEditar.Mostrar();
    }
    private void BuscarPorId()
    {
        popUpBuscar.Mostrar();
    }
}
