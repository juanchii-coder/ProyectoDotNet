@namespace SGE.UI.Components
@using SGE.Aplicacion.CasosDeUso.Expediente
@using SGE.Aplicacion.Entidades
@using SGE.UI
@inject NavigationManager Navigation
@rendermode InteractiveServer
@inject CasoDeUsoExpedienteAlta expAlta
@inject CasoDeUsoExpedienteBaja expBaja
@inject CasoDeUsoExpedienteConsultaTodos expConsultaTodos
@inject CasoDeUsoExpedienteModificacion expModificacion
@page "/expedientes/{idUsuario}"

<h3>expedientes</h3>

@if (string.IsNullOrEmpty(idUsuario))
{
    Navigation.NavigateTo("/login");
}
else if (!hayExpedientes)
{
    <p>Cargando....</p>
}
else
{
    <input @bind=@idExpediente placeholder="buscar por id" />
    <button @onclick="BuscarPorId"/>
    <PopUpBuscarExpediente idExp=@idExpediente User=@idUsuario/>
    <ListaExpediente Expe=@expedientes User=@idUsuario/>
    @if (!puedeVer)
    {
        <p>no tienes los permisos suficientes</p>
    }
}

@code {
    [Parameter]
    public string? idUsuario { get; set; }
    private bool hayExpedientes = true;
    private bool puedeVer = true;
    private int idExpediente;
    private List<Expediente>? expedientes { get; set; }
    PopUpEditar popUpEditar = null!;
    PopUpBuscarExpediente popUpBuscar = null!;


    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        //cambiar idUsuario a int y hacer una busqueda por id en el repositorio de usuarios para obtener los permisos
        //cambiar los permisos dependiendo de que es lo que pueda hacer el usuario
        expedientes = expConsultaTodos.Ejecutar();
    }
    private void VerTramites(Expediente expe)
    {
        //buscar si existen tramites
        //si no hay tramites asociados hacer un popUp de un msj "no hay tramites asociados al expediente con id x"
        Navigation.NavigateTo($"/tramite/{expe.Id}");
    }
    private void EditarOk()
    {
        popUpEditar.Mostrar();
    }
    private void BuscarPorId()
    {
        popUpBuscarExpediente.Mostrar();
    }
}
